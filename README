
Add data 
curl -H "Content-Type: application/rdf" localhost:8080/mutate?commitNow=true -X POST -d $'
{
  set {
   _:luke <name> "Luke Skywalker" .
   _:luke <dgraph.type> "Person" .
   _:leia <name> "Princess Leia" .
   _:leia <dgraph.type> "Person" .
   _:han <name> "Han Solo" .
   _:han <dgraph.type> "Person" .
   _:lucas <name> "George Lucas" .
   _:lucas <dgraph.type> "Person" .
   _:irvin <name> "Irvin Kernshner" .
   _:irvin <dgraph.type> "Person" .
   _:richard <name> "Richard Marquand" .
   _:richard <dgraph.type> "Person" .

   _:sw1 <name> "Star Wars: Episode IV - A New Hope" .
   _:sw1 <release_date> "1977-05-25" .
   _:sw1 <revenue> "775000000" .
   _:sw1 <running_time> "121" .
   _:sw1 <starring> _:luke .
   _:sw1 <starring> _:leia .
   _:sw1 <starring> _:han .
   _:sw1 <director> _:richard .
   _:sw1 <dgraph.type> "Film" .

   _:sw2 <name> "Star Wars: Episode V - The Empire Strikes Back" .
   _:sw2 <release_date> "1980-05-21" .
   _:sw2 <revenue> "534000000" .
   _:sw2 <running_time> "124" .
   _:sw2 <starring> _:luke .
   _:sw2 <starring> _:leia .
   _:sw2 <starring> _:han .
   _:sw2 <director> _:richard .
   _:sw2 <dgraph.type> "Film" .

   _:sw3 <name> "Star Wars: Episode VI - Return of the Jedi" .
   _:sw3 <release_date> "1983-05-25" .
   _:sw3 <revenue> "572000000" .
   _:sw3 <running_time> "131" .
   _:sw3 <starring> _:luke .
   _:sw3 <starring> _:leia .
   _:sw3 <starring> _:han .
   _:sw3 <director> _:richard .
   _:sw3 <dgraph.type> "Film" .

   _:st1 <name> "Star Trek: The Motion Picture" .
   _:st1 <release_date> "1979-12-07" .
   _:st1 <revenue> "139000000" .
   _:st1 <running_time> "132" .
   _:st1 <dgraph.type> "Film" .
  }
}
' | python -m json.tool | less

find all nodes with name which include STAR WARS
{
  me(func:allofterms(name, "Star Wars")) {
    name
    release_date
    revenue
    running_time
    dgraph.type
    director {
    dgraph.type
     name
    }
    starring {
    dgraph.type
     name
    }
  }
}
me() ---- any name
sharing  ---- array of object 
@filter(le(release_date, "2000"))   ----- add after function example me(func:has(name)) @filter(le(release_date, "2000")){
regexp(name@en, /^Steven Sp.*$/)  ----- regex
name@en ---- tag of name
match(name@en, Stephen, 3)  ----- find simelar worlds
eq(val(films), [1,2,3]) --- if films count is 1, 2, 3
 me(func: has(director.film), first: 5) { ---- show first 5 result
Find all nodes where is me(func:has(name)) {


upsert {
  query {
    q(func: eq(email, "user@company1.io")) {
      v as uid
    }
  }

  mutation {
    set {
      uid(v) <age> "28" .
    }
  }
}'






curl -H "Content-Type: application/json" localhost:8080/mutate?commitNow=true -X POST -d $'
{
  "set": {
  "uid": "_:diggy",
  "name": "diggy",
  "food": "pizza"
  }
}
' | python -m json.tool | less

curl -H "Content-Type: application/json" -X POST localhost:8080/mutate?commitNow=true -d $'
    {
      "set": [
        {
          "name": "Alice"
        },
        {
          "name": "Bob"
        }
      ]
    }' | jq


    {
  "data": {
    "code": "Success",
    "message": "Done",
    "uids": {
      "diggy": "0x2715"
    }
  },
  "extensions": {
    "server_latency": {
      "parsing_ns": 61166,
      "processing_ns": 73444425
    },
    "txn": {
      "start_ts": 10008,
      "commit_ts": 10009,
      "preds": [
        "1-food",
        "1-name"
      ]
    }
  }2
  {
  "uid": "_:alice",
  "name": "Alice",
  "friend": {
    "uid": "_:bob",
    "name": "Betty"
  }
}
  
  
curl -H "Content-Type: application/json" -X POST localhost:8080/mutate?commitNow=true -d $'{
  "query": "{ var(func: uid(0x9)) {starring {v as uid}}}",

  "set": {
    "uid": "uid(v)",
    "name": "WTFFFFF"
  }
}' | jq
}



README.txt
Відображається "README.txt".
